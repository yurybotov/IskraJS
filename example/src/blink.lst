
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000324  08004000  08004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08004324  08004324  00004324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08004324  08004324  00004324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08004324  08004324  00004324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000000  20000800  20000800  00004324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000000  20000800  20000800  00000000  2**0
                  ALLOC
  6 .ccm          00000000  10000000  10000000  00004324  2**0
                  CONTENTS
  7 .debug_info   0000121e  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005c0  00000000  00000000  00005542  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ab  00000000  00000000  00005b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000140  00000000  00000000  00005dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00005eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000408c  00000000  00000000  00005fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000ed7  00000000  00000000  0000a059  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000d41f  00000000  00000000  0000af30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000031  00000000  00000000  0001834f  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 00000039  00000000  00000000  00018380  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000022c  00000000  00000000  000183bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 00 02 20 89 42 00 08 87 42 00 08 85 42 00 08     ... .B...B...B..
 8004010:	85 42 00 08 85 42 00 08 85 42 00 08 00 00 00 00     .B...B...B......
	...
 800402c:	87 42 00 08 87 42 00 08 00 00 00 00 87 42 00 08     .B...B.......B..
 800403c:	19 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800404c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800405c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800406c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800407c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800408c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800409c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 80040ac:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 80040bc:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 80040cc:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 80040dc:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 80040ec:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 80040fc:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800410c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800411c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800412c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800413c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800414c:	0d 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800415c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800416c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800417c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800418c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..
 800419c:	85 42 00 08 85 42 00 08 85 42 00 08 85 42 00 08     .B...B...B...B..

080041ac <main>:

#include "depend.h"

#define DELAY 10000000

int main(void) {
 80041ac:	b508      	push	{r3, lr}
    SCB_VTOR = APPLICATION_START;
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <main+0x1c>)
 80041b0:	4a06      	ldr	r2, [pc, #24]	; (80041cc <main+0x20>)
 80041b2:	601a      	str	r2, [r3, #0]
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__ volatile ("CPSIE I\n");
 80041b4:	b662      	cpsie	i
    cm_enable_interrupts();

    showLeds();
 80041b6:	f000 f80f 	bl	80041d8 <showLeds>
    while (1) {
        toggleLeds();
 80041ba:	f000 f81f 	bl	80041fc <toggleLeds>
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <main+0x24>)
        for (int i = 0; i < DELAY; i++) {
            __asm__("nop");
 80041c0:	bf00      	nop
        for (int i = 0; i < DELAY; i++) {
 80041c2:	3b01      	subs	r3, #1
 80041c4:	d1fc      	bne.n	80041c0 <main+0x14>
 80041c6:	e7f8      	b.n	80041ba <main+0xe>
 80041c8:	e000ed08 	.word	0xe000ed08
 80041cc:	08004000 	.word	0x08004000
 80041d0:	00989680 	.word	0x00989680

080041d4 <application_sys_tick_handler>:
    }
    return 0;
}

void application_sys_tick_handler(void) {
    __asm volatile ("nop");
 80041d4:	bf00      	nop
 80041d6:	4770      	bx	lr

080041d8 <showLeds>:
#endif
    gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO11 | GPIO12);
    gpio_set_af(GPIOA, GPIO_AF10, GPIO11 | GPIO12);
}

void showLeds() {
 80041d8:	b510      	push	{r4, lr}
#ifdef STM32F407VGT6
    gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT,
 80041da:	4c07      	ldr	r4, [pc, #28]	; (80041f8 <showLeds+0x20>)
 80041dc:	2101      	movs	r1, #1
 80041de:	4620      	mov	r0, r4
 80041e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80041e4:	2200      	movs	r2, #0
 80041e6:	f000 f82b 	bl	8004240 <gpio_mode_setup>
        GPIO_PUPD_NONE, GPIO12 | GPIO13 | GPIO14 | GPIO15);
    gpio_set(GPIOD, GPIO12 | GPIO14);
 80041ea:	4620      	mov	r0, r4
 80041ec:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
#ifdef STM32F411RG
    gpio_mode_setup(GPIOB, GPIO_MODE_OUTPUT,
        GPIO_PUPD_NONE, GPIO2 | GPIO12);
    gpio_set(GPIOB, GPIO2);
#endif
}
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_set(GPIOD, GPIO12 | GPIO14);
 80041f4:	f000 b819 	b.w	800422a <gpio_set>
 80041f8:	40020c00 	.word	0x40020c00

080041fc <toggleLeds>:

void toggleLeds() {
#ifdef STM32F407VGT6
    gpio_toggle(GPIOD, GPIO12 | GPIO13 | GPIO14 | GPIO15);
 80041fc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <toggleLeds+0xc>)
 8004202:	f000 b814 	b.w	800422e <gpio_toggle>
 8004206:	bf00      	nop
 8004208:	40020c00 	.word	0x40020c00

0800420c <otg_fs_isr>:
#include <libopencm3/cm3/cortex.h>
#include <libopencm3/cm3/nvic.h>

// redirect to bootloader USB FS handler
void otg_fs_isr(void) {
    __asm volatile(
 800420c:	f240 11ad 	movw	r1, #429	; 0x1ad
 8004210:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004214:	468f      	mov	pc, r1
 8004216:	4770      	bx	lr

08004218 <sys_tick_handler>:
        "movt r1, #0x0800\n"
        "mov pc, r1\n");
}

// do local and redirect to bootloader systick address
void sys_tick_handler(void) {
 8004218:	b508      	push	{r3, lr}
    application_sys_tick_handler();
 800421a:	f7ff ffdb 	bl	80041d4 <application_sys_tick_handler>
    __asm volatile(
 800421e:	f240 11b9 	movw	r1, #441	; 0x1b9
 8004222:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004226:	468f      	mov	pc, r1
 8004228:	bd08      	pop	{r3, pc}

0800422a <gpio_set>:
 800422a:	6181      	str	r1, [r0, #24]
 800422c:	4770      	bx	lr

0800422e <gpio_toggle>:
 800422e:	6943      	ldr	r3, [r0, #20]
 8004230:	ea03 0201 	and.w	r2, r3, r1
 8004234:	ea21 0103 	bic.w	r1, r1, r3
 8004238:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800423c:	6181      	str	r1, [r0, #24]
 800423e:	4770      	bx	lr

08004240 <gpio_mode_setup>:
 8004240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004244:	6805      	ldr	r5, [r0, #0]
 8004246:	68c4      	ldr	r4, [r0, #12]
 8004248:	2600      	movs	r6, #0
 800424a:	f04f 0c03 	mov.w	ip, #3
 800424e:	fa43 f706 	asr.w	r7, r3, r6
 8004252:	07ff      	lsls	r7, r7, #31
 8004254:	d50f      	bpl.n	8004276 <gpio_mode_setup+0x36>
 8004256:	0077      	lsls	r7, r6, #1
 8004258:	fa0c fe07 	lsl.w	lr, ip, r7
 800425c:	ea6f 0e0e 	mvn.w	lr, lr
 8004260:	fa01 f807 	lsl.w	r8, r1, r7
 8004264:	ea0e 0505 	and.w	r5, lr, r5
 8004268:	ea0e 0404 	and.w	r4, lr, r4
 800426c:	fa02 f707 	lsl.w	r7, r2, r7
 8004270:	ea48 0505 	orr.w	r5, r8, r5
 8004274:	433c      	orrs	r4, r7
 8004276:	3601      	adds	r6, #1
 8004278:	2e10      	cmp	r6, #16
 800427a:	d1e8      	bne.n	800424e <gpio_mode_setup+0xe>
 800427c:	6005      	str	r5, [r0, #0]
 800427e:	60c4      	str	r4, [r0, #12]
 8004280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004284 <blocking_handler>:
 8004284:	e7fe      	b.n	8004284 <blocking_handler>

08004286 <null_handler>:
 8004286:	4770      	bx	lr

08004288 <reset_handler>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	491b      	ldr	r1, [pc, #108]	; (80042f8 <reset_handler+0x70>)
 800428c:	4c1b      	ldr	r4, [pc, #108]	; (80042fc <reset_handler+0x74>)
 800428e:	481c      	ldr	r0, [pc, #112]	; (8004300 <reset_handler+0x78>)
 8004290:	2200      	movs	r2, #0
 8004292:	1853      	adds	r3, r2, r1
 8004294:	4283      	cmp	r3, r0
 8004296:	d31b      	bcc.n	80042d0 <reset_handler+0x48>
 8004298:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <reset_handler+0x7c>)
 800429a:	2100      	movs	r1, #0
 800429c:	4293      	cmp	r3, r2
 800429e:	d31b      	bcc.n	80042d8 <reset_handler+0x50>
 80042a0:	4a19      	ldr	r2, [pc, #100]	; (8004308 <reset_handler+0x80>)
 80042a2:	4c1a      	ldr	r4, [pc, #104]	; (800430c <reset_handler+0x84>)
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	4d1a      	ldr	r5, [pc, #104]	; (8004310 <reset_handler+0x88>)
 80042a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80042b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b4:	6753      	str	r3, [r2, #116]	; 0x74
 80042b6:	42ac      	cmp	r4, r5
 80042b8:	d311      	bcc.n	80042de <reset_handler+0x56>
 80042ba:	4c16      	ldr	r4, [pc, #88]	; (8004314 <reset_handler+0x8c>)
 80042bc:	4d16      	ldr	r5, [pc, #88]	; (8004318 <reset_handler+0x90>)
 80042be:	42ac      	cmp	r4, r5
 80042c0:	d311      	bcc.n	80042e6 <reset_handler+0x5e>
 80042c2:	f7ff ff73 	bl	80041ac <main>
 80042c6:	4c15      	ldr	r4, [pc, #84]	; (800431c <reset_handler+0x94>)
 80042c8:	4d15      	ldr	r5, [pc, #84]	; (8004320 <reset_handler+0x98>)
 80042ca:	42ac      	cmp	r4, r5
 80042cc:	d30f      	bcc.n	80042ee <reset_handler+0x66>
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
 80042d0:	5913      	ldr	r3, [r2, r4]
 80042d2:	5053      	str	r3, [r2, r1]
 80042d4:	3204      	adds	r2, #4
 80042d6:	e7dc      	b.n	8004292 <reset_handler+0xa>
 80042d8:	6019      	str	r1, [r3, #0]
 80042da:	3304      	adds	r3, #4
 80042dc:	e7de      	b.n	800429c <reset_handler+0x14>
 80042de:	f854 3b04 	ldr.w	r3, [r4], #4
 80042e2:	4798      	blx	r3
 80042e4:	e7e7      	b.n	80042b6 <reset_handler+0x2e>
 80042e6:	f854 3b04 	ldr.w	r3, [r4], #4
 80042ea:	4798      	blx	r3
 80042ec:	e7e7      	b.n	80042be <reset_handler+0x36>
 80042ee:	f854 3b04 	ldr.w	r3, [r4], #4
 80042f2:	4798      	blx	r3
 80042f4:	e7e9      	b.n	80042ca <reset_handler+0x42>
 80042f6:	bf00      	nop
 80042f8:	20000800 	.word	0x20000800
 80042fc:	08004324 	.word	0x08004324
 8004300:	20000800 	.word	0x20000800
 8004304:	20000800 	.word	0x20000800
 8004308:	e000ed14 	.word	0xe000ed14
 800430c:	08004324 	.word	0x08004324
 8004310:	08004324 	.word	0x08004324
 8004314:	08004324 	.word	0x08004324
 8004318:	08004324 	.word	0x08004324
 800431c:	08004324 	.word	0x08004324
 8004320:	08004324 	.word	0x08004324
