
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08000310  08000310  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08000310  08000310  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08000310  08000310  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000000  20000000  20000000  00010310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  6 .ccm          00000000  10000000  10000000  00010310  2**0
                  CONTENTS
  7 .debug_info   00001205  00000000  00000000  00010310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000058a  00000000  00000000  00011515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ab  00000000  00000000  00011a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000140  00000000  00000000  00011d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00011e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004073  00000000  00000000  00011f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000ec9  00000000  00000000  00015fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000d421  00000000  00000000  00016ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000031  00000000  00000000  000242c7  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 00000039  00000000  00000000  000242f8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000224  00000000  00000000  00024334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 00 02 20 75 02 00 08 71 02 00 08 6f 02 00 08     ... u...q...o...
 8000010:	6f 02 00 08 6f 02 00 08 6f 02 00 08 00 00 00 00     o...o...o.......
	...
 800002c:	71 02 00 08 71 02 00 08 00 00 00 00 71 02 00 08     q...q.......q...
 800003c:	09 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     ....o...o...o...
 800004c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800005c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800006c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800007c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800008c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800009c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 80000ac:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 80000bc:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 80000cc:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 80000dc:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 80000ec:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 80000fc:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800010c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800011c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800012c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800013c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800014c:	fd 01 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     ....o...o...o...
 800015c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800016c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800017c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800018c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...
 800019c:	6f 02 00 08 6f 02 00 08 6f 02 00 08 6f 02 00 08     o...o...o...o...

080001ac <main>:

#include "depend.h"

#define DELAY 10000000

int main(void) {
 80001ac:	b508      	push	{r3, lr}
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__ volatile ("CPSIE I\n");
 80001ae:	b662      	cpsie	i
    //SCB_VTOR = APPLICATION_START;
    cm_enable_interrupts();

    showLeds();
 80001b0:	f000 f80a 	bl	80001c8 <showLeds>
    while (1) {
        toggleLeds();
 80001b4:	f000 f81a 	bl	80001ec <toggleLeds>
 80001b8:	4b02      	ldr	r3, [pc, #8]	; (80001c4 <main+0x18>)
        for (int i = 0; i < DELAY; i++) {
            __asm__("nop");
 80001ba:	bf00      	nop
        for (int i = 0; i < DELAY; i++) {
 80001bc:	3b01      	subs	r3, #1
 80001be:	d1fc      	bne.n	80001ba <main+0xe>
 80001c0:	e7f8      	b.n	80001b4 <main+0x8>
 80001c2:	bf00      	nop
 80001c4:	00989680 	.word	0x00989680

080001c8 <showLeds>:
#endif
    gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO11 | GPIO12);
    gpio_set_af(GPIOA, GPIO_AF10, GPIO11 | GPIO12);
}

void showLeds() {
 80001c8:	b510      	push	{r4, lr}
#ifdef STM32F407VGT6
    gpio_mode_setup(GPIOD, GPIO_MODE_OUTPUT,
 80001ca:	4c07      	ldr	r4, [pc, #28]	; (80001e8 <showLeds+0x20>)
 80001cc:	2101      	movs	r1, #1
 80001ce:	4620      	mov	r0, r4
 80001d0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80001d4:	2200      	movs	r2, #0
 80001d6:	f000 f828 	bl	800022a <gpio_mode_setup>
        GPIO_PUPD_NONE, GPIO12 | GPIO13 | GPIO14 | GPIO15);
    gpio_set(GPIOD, GPIO12 | GPIO14);
 80001da:	4620      	mov	r0, r4
 80001dc:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
#ifdef STM32F411RG
    gpio_mode_setup(GPIOB, GPIO_MODE_OUTPUT,
        GPIO_PUPD_NONE, GPIO2 | GPIO12);
    gpio_set(GPIOB, GPIO2);
#endif
}
 80001e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_set(GPIOD, GPIO12 | GPIO14);
 80001e4:	f000 b816 	b.w	8000214 <gpio_set>
 80001e8:	40020c00 	.word	0x40020c00

080001ec <toggleLeds>:

void toggleLeds() {
#ifdef STM32F407VGT6
    gpio_toggle(GPIOD, GPIO12 | GPIO13 | GPIO14 | GPIO15);
 80001ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80001f0:	4801      	ldr	r0, [pc, #4]	; (80001f8 <toggleLeds+0xc>)
 80001f2:	f000 b811 	b.w	8000218 <gpio_toggle>
 80001f6:	bf00      	nop
 80001f8:	40020c00 	.word	0x40020c00

080001fc <otg_fs_isr>:
    /*__asm volatile(
        "movw r1, #0x01ad\n"
        "movt r1, #0x0800\n"
        "mov pc, r1\n"
    );*/
    __asm volatile(
 80001fc:	4901      	ldr	r1, [pc, #4]	; (8000204 <otg_fs_isr+0x8>)
 80001fe:	468f      	mov	pc, r1
 8000200:	4770      	bx	lr
 8000202:	0000      	.short	0x0000
 8000204:	080001ad 	.word	0x080001ad

08000208 <sys_tick_handler>:

// do local and redirect to bootloader systick address
void sys_tick_handler(void) {
    //application_sys_tick_handler();
    //volatile uint32_t jumpAddress = *(volatile uint32_t*)(SYSTICK_HANDLER);
    __asm volatile(
 8000208:	f240 11b9 	movw	r1, #441	; 0x1b9
 800020c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000210:	468f      	mov	pc, r1
 8000212:	4770      	bx	lr

08000214 <gpio_set>:
 8000214:	6181      	str	r1, [r0, #24]
 8000216:	4770      	bx	lr

08000218 <gpio_toggle>:
 8000218:	6943      	ldr	r3, [r0, #20]
 800021a:	ea03 0201 	and.w	r2, r3, r1
 800021e:	ea21 0103 	bic.w	r1, r1, r3
 8000222:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000226:	6181      	str	r1, [r0, #24]
 8000228:	4770      	bx	lr

0800022a <gpio_mode_setup>:
 800022a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800022e:	6805      	ldr	r5, [r0, #0]
 8000230:	68c4      	ldr	r4, [r0, #12]
 8000232:	2600      	movs	r6, #0
 8000234:	f04f 0c03 	mov.w	ip, #3
 8000238:	fa43 f706 	asr.w	r7, r3, r6
 800023c:	07ff      	lsls	r7, r7, #31
 800023e:	d50f      	bpl.n	8000260 <gpio_mode_setup+0x36>
 8000240:	0077      	lsls	r7, r6, #1
 8000242:	fa0c fe07 	lsl.w	lr, ip, r7
 8000246:	ea6f 0e0e 	mvn.w	lr, lr
 800024a:	fa01 f807 	lsl.w	r8, r1, r7
 800024e:	ea0e 0505 	and.w	r5, lr, r5
 8000252:	ea0e 0404 	and.w	r4, lr, r4
 8000256:	fa02 f707 	lsl.w	r7, r2, r7
 800025a:	ea48 0505 	orr.w	r5, r8, r5
 800025e:	433c      	orrs	r4, r7
 8000260:	3601      	adds	r6, #1
 8000262:	2e10      	cmp	r6, #16
 8000264:	d1e8      	bne.n	8000238 <gpio_mode_setup+0xe>
 8000266:	6005      	str	r5, [r0, #0]
 8000268:	60c4      	str	r4, [r0, #12]
 800026a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800026e <blocking_handler>:
 800026e:	e7fe      	b.n	800026e <blocking_handler>

08000270 <null_handler>:
 8000270:	4770      	bx	lr
	...

08000274 <reset_handler>:
 8000274:	b538      	push	{r3, r4, r5, lr}
 8000276:	491b      	ldr	r1, [pc, #108]	; (80002e4 <reset_handler+0x70>)
 8000278:	4c1b      	ldr	r4, [pc, #108]	; (80002e8 <reset_handler+0x74>)
 800027a:	481c      	ldr	r0, [pc, #112]	; (80002ec <reset_handler+0x78>)
 800027c:	2200      	movs	r2, #0
 800027e:	1853      	adds	r3, r2, r1
 8000280:	4283      	cmp	r3, r0
 8000282:	d31b      	bcc.n	80002bc <reset_handler+0x48>
 8000284:	4a1a      	ldr	r2, [pc, #104]	; (80002f0 <reset_handler+0x7c>)
 8000286:	2100      	movs	r1, #0
 8000288:	4293      	cmp	r3, r2
 800028a:	d31b      	bcc.n	80002c4 <reset_handler+0x50>
 800028c:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <reset_handler+0x80>)
 800028e:	4c1a      	ldr	r4, [pc, #104]	; (80002f8 <reset_handler+0x84>)
 8000290:	6813      	ldr	r3, [r2, #0]
 8000292:	4d1a      	ldr	r5, [pc, #104]	; (80002fc <reset_handler+0x88>)
 8000294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000298:	6013      	str	r3, [r2, #0]
 800029a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800029c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a0:	6753      	str	r3, [r2, #116]	; 0x74
 80002a2:	42ac      	cmp	r4, r5
 80002a4:	d311      	bcc.n	80002ca <reset_handler+0x56>
 80002a6:	4c16      	ldr	r4, [pc, #88]	; (8000300 <reset_handler+0x8c>)
 80002a8:	4d16      	ldr	r5, [pc, #88]	; (8000304 <reset_handler+0x90>)
 80002aa:	42ac      	cmp	r4, r5
 80002ac:	d311      	bcc.n	80002d2 <reset_handler+0x5e>
 80002ae:	f7ff ff7d 	bl	80001ac <main>
 80002b2:	4c15      	ldr	r4, [pc, #84]	; (8000308 <reset_handler+0x94>)
 80002b4:	4d15      	ldr	r5, [pc, #84]	; (800030c <reset_handler+0x98>)
 80002b6:	42ac      	cmp	r4, r5
 80002b8:	d30f      	bcc.n	80002da <reset_handler+0x66>
 80002ba:	bd38      	pop	{r3, r4, r5, pc}
 80002bc:	5913      	ldr	r3, [r2, r4]
 80002be:	5053      	str	r3, [r2, r1]
 80002c0:	3204      	adds	r2, #4
 80002c2:	e7dc      	b.n	800027e <reset_handler+0xa>
 80002c4:	6019      	str	r1, [r3, #0]
 80002c6:	3304      	adds	r3, #4
 80002c8:	e7de      	b.n	8000288 <reset_handler+0x14>
 80002ca:	f854 3b04 	ldr.w	r3, [r4], #4
 80002ce:	4798      	blx	r3
 80002d0:	e7e7      	b.n	80002a2 <reset_handler+0x2e>
 80002d2:	f854 3b04 	ldr.w	r3, [r4], #4
 80002d6:	4798      	blx	r3
 80002d8:	e7e7      	b.n	80002aa <reset_handler+0x36>
 80002da:	f854 3b04 	ldr.w	r3, [r4], #4
 80002de:	4798      	blx	r3
 80002e0:	e7e9      	b.n	80002b6 <reset_handler+0x42>
 80002e2:	bf00      	nop
 80002e4:	20000000 	.word	0x20000000
 80002e8:	08000310 	.word	0x08000310
 80002ec:	20000000 	.word	0x20000000
 80002f0:	20000000 	.word	0x20000000
 80002f4:	e000ed14 	.word	0xe000ed14
 80002f8:	08000310 	.word	0x08000310
 80002fc:	08000310 	.word	0x08000310
 8000300:	08000310 	.word	0x08000310
 8000304:	08000310 	.word	0x08000310
 8000308:	08000310 	.word	0x08000310
 800030c:	08000310 	.word	0x08000310
